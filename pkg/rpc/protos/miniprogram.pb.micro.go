// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: miniprogram.proto

package protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Miniprogram service

type MiniprogramService interface {
	// 获取小程序配置
	GetMiniprogramByShopId(ctx context.Context, in *GetMiniprogramRequest, opts ...client.CallOption) (*GetMiniprogramReply, error)
}

type miniprogramService struct {
	c    client.Client
	name string
}

func NewMiniprogramService(name string, c client.Client) MiniprogramService {
	return &miniprogramService{
		c:    c,
		name: name,
	}
}

func (c *miniprogramService) GetMiniprogramByShopId(ctx context.Context, in *GetMiniprogramRequest, opts ...client.CallOption) (*GetMiniprogramReply, error) {
	req := c.c.NewRequest(c.name, "Miniprogram.GetMiniprogramByShopId", in)
	out := new(GetMiniprogramReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Miniprogram service

type MiniprogramHandler interface {
	// 获取小程序配置
	GetMiniprogramByShopId(context.Context, *GetMiniprogramRequest, *GetMiniprogramReply) error
}

func RegisterMiniprogramHandler(s server.Server, hdlr MiniprogramHandler, opts ...server.HandlerOption) error {
	type miniprogram interface {
		GetMiniprogramByShopId(ctx context.Context, in *GetMiniprogramRequest, out *GetMiniprogramReply) error
	}
	type Miniprogram struct {
		miniprogram
	}
	h := &miniprogramHandler{hdlr}
	return s.Handle(s.NewHandler(&Miniprogram{h}, opts...))
}

type miniprogramHandler struct {
	MiniprogramHandler
}

func (h *miniprogramHandler) GetMiniprogramByShopId(ctx context.Context, in *GetMiniprogramRequest, out *GetMiniprogramReply) error {
	return h.MiniprogramHandler.GetMiniprogramByShopId(ctx, in, out)
}
